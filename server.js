// Import required modules
const express = require("express");
const mysql = require("mysql2");
const axios = require("axios");
const bodyParser = require("body-parser");
const cors = require("cors");

// Initialize Express app
const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MySQL connection
const db = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "root",
  database: "ai-agent-analysis",
});

db.connect((err) => {
  if (err) {
    console.error("Database connection failed:", err);
    return;
  }
  console.log("Connected to MySQL database.");
});

// Function to get database schema
const getDatabaseSchema = async () => {
  return new Promise((resolve, reject) => {
    const query = `
      SELECT TABLE_NAME, COLUMN_NAME, DATA_TYPE
      FROM INFORMATION_SCHEMA.COLUMNS
      WHERE TABLE_SCHEMA = 'ai-agent-analysis';
    `;

    db.query(query, (err, results) => {
      if (err) {
        reject(err);
      } else {
        resolve(results);
      }
    });
  });
};

// Helper function to format schema for AI
const formatSchemaForAI = (schema) => {
  return schema
    .map(
      (row) =>
        `Table: ${row.TABLE_NAME}, Column: ${row.COLUMN_NAME} (${row.DATA_TYPE})`
    )
    .join("\n");
};

// Endpoint to handle user queries
// Endpoint to handle user queries
app.post("/query", async (req, res) => {
  const { prompt } = req.body;

  if (!prompt) {
    return res.status(400).json({ error: "Prompt is required." });
  }

  try {
    // Fetch database schema
    const schema = await getDatabaseSchema();
    const schemaDescription = formatSchemaForAI(schema);

    // Generate AI prompt
    const aiPrompt = `Given the following database schema:\n${schemaDescription}\nGenerate a SQL query for: \"${prompt}\".`;

    // Call Google AI API
    const aiResponse = await axios.post(
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=AIzaSyA5okghnBJN0x91KHBDrezLwuum_g6jUo4", // Replace GEMINI_API_KEY with your API key
      {
        contents: [
          {
            parts: [
              {
                text: aiPrompt,
              },
            ],
          },
        ],
      },
      {
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    // Extract SQL query from response
    const candidates = aiResponse.data.candidates;

    console.log("AI Response:", candidates);
    if (!candidates || candidates.length === 0) {
      return res.status(500).json({ error: "No query generated by AI." });
    }

    const sqlQuery = candidates[0]?.content?.text; // Adjusted to handle the new response structure
    if (!sqlQuery) {
      return res.status(500).json({ error: "Invalid response from AI." });
    }

    console.log("Generated SQL Query:", sqlQuery);

    // Execute the SQL query
    db.query(sqlQuery, (err, results) => {
      if (err) {
        console.error("Error executing query:", err);
        return res.status(500).json({ error: "Error executing query." });
      }

      res.json({ data: results });
    });
  } catch (error) {
    console.error("Error handling prompt:", error);
    res
      .status(500)
      .json({ error: "An error occurred while processing the prompt." });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
