import { GoogleGenerativeAI } from "@google/generative-ai"; // Import the Google Generative AI SDK
import bodyParser from "body-parser";
import cors from "cors";
import dotenv from "dotenv";
import express from "express";
import { db } from "./db/index.js"; // Database connection

dotenv.config();
const app = express();

// Initialize Google Generative AI model
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

app.use(express.json());
app.use(cors());
app.use(bodyParser.json());

// System Prompt for AI interaction
const systemPrompt = `
You are an assistant with access to a PostgreSQL database that stores a "todos" table. This table contains a list of tasks, each with the following fields:
- 'id' (integer, primary key, auto-incremented)
- 'todo' (text, non-null)
- 'createdAt' (timestamp, auto-generated by default, non-null)
- 'updatedAt' (timestamp, auto-generated by default, non-null)

You can perform operations on this table such as retrieving, creating, updating, and deleting tasks.

The following operations are available to you:
1. **Create Todo**: Add a new task to the database with a specified description (todo).
2. **Get All Todos**: Retrieve all tasks in the database.
3. **Update Todo**: Modify the description of an existing task using its 'id'.
4. **Delete Todo**: Remove a task from the database using its 'id'.
5. **Search Todos**: Find tasks in the database that match a specific search term (case-insensitive).
6. **Get Stats**: Return the number of todos in the database.

### IMPORTANT:
For each action, **ONLY** return the corresponding SQL query or a clear response in the following format. Do **NOT** provide any explanations or additional text. You must return only the query or string and nothing else.

- **Create Todo**: The response should only be an SQL insert query. Example: \`INSERT INTO todos (todo) VALUES ('Buy groceries');\`
- **Get All Todos**: The response should only be: \`SELECT * FROM todos;\`
- **Update Todo**: The response should only be an SQL update query. Example: \`UPDATE todos SET todo = 'Updated task' WHERE id = 1;\`
- **Delete Todo**: The response should only be an SQL delete query. Example: \`DELETE FROM todos WHERE id = 1;\`
  - **NOTE**: The DELETE query must use a WHERE clause to specify which row(s) to delete. If you need to delete the most recent todo, use a subquery like this: \`DELETE FROM todos WHERE id = (SELECT id FROM todos ORDER BY id DESC LIMIT 1);\`
- **Search Todos**: The response should only be an SQL query like: \`SELECT * FROM todos WHERE todo ILIKE '%search term%';\`
- **Get Stats**: The response should only be a query like: \`SELECT COUNT(*) FROM todos;\`

**Only return the SQL query and no additional text.** Your response should be the query or action, nothing else.
`;

// AI interaction endpoint
app.post("/ai", async (req, res) => {
  const { prompt } = req.body;
  console.log("prompt", prompt); // Log user query

  try {
    // Construct the prompt with the system instructions and user query
    const fullPrompt = `${systemPrompt}\nUser Query: ${prompt}\nAI Response:`;

    // Call Google's Generative AI API with the prompt
    const result = await model.generateContent(fullPrompt);
    const aiAnswer = result.response.text().trim();
    console.log("aiAnswer", aiAnswer); // Log AI response (SQL query)

    // Directly execute the AI's SQL query based on its action
    const queryType = aiAnswer.split(" ")[0]; // Extract the query type (INSERT, SELECT, UPDATE, etc.)

    if (queryType === "INSERT") {
      // Execute the SQL INSERT query to add a new todo
      await db.execute(aiAnswer);
      res.json({ action: "created", data: "Todo added successfully." });
    } else if (queryType === "SELECT") {
      // Execute the SQL SELECT query to fetch todos
      const todos = await db.execute(aiAnswer); // Execute the raw SQL query
      res.json({ action: "fetched", data: todos.rows }); // Send the result back to frontend
    } else if (queryType === "UPDATE") {
      // Execute the SQL UPDATE query to modify a todo
      await db.execute(aiAnswer);
      res.json({ action: "updated", data: "Todo updated successfully." });
    } else if (queryType === "DELETE") {
      // Execute the SQL DELETE query to remove a todo
      await db.execute(aiAnswer);
      res.json({ action: "deleted", data: "Todo deleted successfully." });
    } else if (aiAnswer.includes("ILIKE")) {
      // Execute the SQL query to search todos based on the AI response
      const searchResults = await db.execute(aiAnswer);
      res.json({ action: "searched", data: searchResults.rows });
    } else if (aiAnswer.includes("COUNT(*)")) {
      // Execute the SQL COUNT query to get the stats
      const stats = await db.execute(aiAnswer);
      res.json({ action: "stats", data: stats.rows[0] });
    } else {
      res.status(400).send("Unrecognized action.");
    }
  } catch (error) {
    console.log("Error processing AI request:", error.message); // Log the full error for debugging

    // Check if the error message contains '503' to identify if it's a Service Unavailable error
    if (error.message && error.message.includes("503")) {
      return res
        .status(503)
        .send("The server is busy. Please try again later.");
    }

    // Handle network errors (no response from the server)
    if (error.request) {
      return res.status(500).send("Network error occurred. Please try again.");
    }

    // General error handling for non-Axios errors
    res.status(500).send("Error processing request");
  }
});

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
