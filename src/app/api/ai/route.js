import { db } from "@/lib/db"; // Assuming you have a database utility
import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

const systemPrompt = `
You are an assistant with access to a PostgreSQL database that stores a "todos" table. This table contains a list of tasks, each with the following fields:
- 'id' (integer, primary key, auto-incremented)
- 'todo' (text, non-null)
- 'createdAt' (timestamp, auto-generated by default, non-null)
- 'updatedAt' (timestamp, auto-generated by default, non-null)

You can perform operations on this table such as retrieving, creating, updating, and deleting tasks.

The following operations are available to you:
1. **Create Todo**: Add a new task to the database with a specified description (todo).
2. **Get All Todos**: Retrieve all tasks in the database.
3. **Update Todo**: Modify the description of an existing task using its 'id'.
4. **Delete Todo**: Remove a task from the database using its 'id'.
5. **Search Todos**: Find tasks in the database that match a specific search term (case-insensitive).
6. **Get Stats**: Return the number of todos in the database.

### IMPORTANT:
For each action, **ONLY** return the corresponding SQL query or a clear response in the following format. Do **NOT** provide any explanations or additional text. You must return only the query or string and nothing else.

- **Create Todo**: The response should only be an SQL insert query. Example: \`INSERT INTO todos (todo) VALUES ('Buy groceries');\`
- **Get All Todos**: The response should only be: \`SELECT * FROM todos;\`
- **Update Todo**: The response should only be an SQL update query. Example: \`UPDATE todos SET todo = 'Updated task' WHERE id = 1;\`
- **Delete Todo**: The response should only be an SQL delete query. Example: \`DELETE FROM todos WHERE id = 1;\`
  - **NOTE**: The DELETE query must use a WHERE clause to specify which row(s) to delete. If you need to delete the most recent todo, use a subquery like this: \`DELETE FROM todos WHERE id = (SELECT id FROM todos ORDER BY id DESC LIMIT 1);\`
- **Search Todos**: The response should only be an SQL query like: \`SELECT * FROM todos WHERE todo ILIKE '%search term%';\`
- **Get Stats**: The response should only be a query like: \`SELECT COUNT(*) FROM todos;\`

**Only return the SQL query and no additional text.** Your response should be the query or action, nothing else.
`;

export async function POST(req) {
  const { prompt } = await req.json();
  console.log("prompt", prompt);

  try {
    const fullPrompt = `${systemPrompt}\nUser Query: ${prompt}\nAI Response:`;
    const result = await model.generateContent(fullPrompt);
    const aiAnswer = result.response.text().trim();
    console.log("aiAnswer", aiAnswer);

    const queryType = aiAnswer.split(" ")[0];

    if (queryType === "INSERT") {
      await db.execute(aiAnswer);
      return Response.json({
        action: "created",
        data: "Todo added successfully.",
      });
    } else if (queryType === "SELECT") {
      const todos = await db.execute(aiAnswer);
      return Response.json({ action: "fetched", data: todos.rows });
    } else if (queryType === "UPDATE") {
      await db.execute(aiAnswer);
      return Response.json({
        action: "updated",
        data: "Todo updated successfully.",
      });
    } else if (queryType === "DELETE") {
      await db.execute(aiAnswer);
      return Response.json({
        action: "deleted",
        data: "Todo deleted successfully.",
      });
    } else if (aiAnswer.includes("ILIKE")) {
      const searchResults = await db.execute(aiAnswer);
      return Response.json({ action: "searched", data: searchResults.rows });
    } else if (aiAnswer.includes("COUNT(*)")) {
      const stats = await db.execute(aiAnswer);
      return Response.json({ action: "stats", data: stats.rows[0] });
    } else {
      return Response.json({ error: "Unrecognized action." }, { status: 400 });
    }
  } catch (error) {
    console.log("Error processing AI request:", error.message);

    if (error.message && error.message.includes("503")) {
      return Response.json(
        { error: "The server is busy. Please try again later." },
        { status: 503 }
      );
    }

    if (error.request) {
      return Response.json(
        { error: "Network error occurred. Please try again." },
        { status: 500 }
      );
    }

    return Response.json(
      { error: "Error processing request" },
      { status: 500 }
    );
  }
}
